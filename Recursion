1. Print Decreasing: 
public static void printDecreasing(int n){
      if(n<1) return;

      System.out.println(n);
      printDecreasing(n-1);  
    }

2. Print Increasing :
   public static void printIncreasing(int n){

        if(n<1) return;

        printIncreasing(n-1);
        System.out.println(n);
    }
 
 3. Print Increasing Decreasing:
   
    public static void pdi(int n){
        if(n<1) return;

        System.out.println(n);
         pdi(n-1);
        System.out.println(n);
        
    }
  
  4. Factorial:
   public static int factorial(int n){
        if(n<1) return 1;

        return n*factorial(n-1);
        
    }
    
  
    
   5. Power linear:
   
   public static int power(int x, int n){
         if(n<1) return 1;
         return x*power(x,n-1);
    }
    
   6. Power Logarithmic:
   
   
    public static int power(int x, int n){
         if(n==1) return x ;

         if(n%2==0){
         return power(x,n/2)*power(x,n/2);   
          }
        else{
           return power(x,n/2)*power(x,n/2)*x;    
          }
    }
    
    or 
    
     public static int power(int x, int n){
         if(n==0) return 1 ;

         int x2= power(x,n/2);
         int xx= x2*x2;

         if(n%2==1){
             xx=xx*x;
         }
           return xx;    
          }
          
  7. Print Zigzag:
  
   public static void pzz(int n){
      if(n==0)
      return ;

      System.out.print(n+" ");
      pzz(n-1);
      System.out.print(n+" ");
      pzz(n-1);
      System.out.print(n+" ");
    }
  
  9. Display Array:
    public static void displayArr(int[] arr, int idx){
        if(idx==arr.length) 
          return;

        System.out.println(arr[idx]);
        displayArr(arr,idx+1);
    }
    
  10. Array reverse:
   
    public static void displayArrReverse(int[] arr, int idx) {

        if(idx==arr.length) 
          return;

        displayArrReverse(arr,idx+1);
        System.out.println(arr[idx]);
    }

11. Max of an array:
 
 public static int maxOfArray(int[] arr, int idx){
        if(idx==arr.length-1)
        return arr[idx];

        int m= Math.max(arr[idx],maxOfArray(arr,idx+1));
        return m;
        
 12. 1st index of occurrence:
   
    public static int firstIndex(int[] arr, int idx, int x){
        if(idx==arr.length)
        return -1;
        if(arr[idx]==x)
        return idx;

        return firstIndex(arr,idx+1, x);
        
 13. Last index of occurrence:
 
     public static int lastIndex(int[] arr, int idx, int x){
         if(idx==arr.length){
             return -1;
         }
          int r=lastIndex( arr,  idx+1,  x);
              if(r==-1){
                  if(arr[idx]==x){
                      return idx;
                  }
                  else{
                      return -1;
                  }
              }
              else 
              return r;
         }

14. All indices of an array:

 public static int[] allIndices(int[] arr, int x, int idx, int fsf) {
        // write ur code here
        if(idx==arr.length)
          return new int[fsf];

        if(arr[idx]==x){
          int iarr[]= allIndices( arr,  x,  idx+1,  fsf+1);
          iarr[fsf]=idx;
          return iarr;
        }
        else{
            int iarr[]= allIndices( arr,  x,  idx+1,  fsf);
            return iarr;
        }

        }
