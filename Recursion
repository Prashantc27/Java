1. Print Decreasing: 
public static void printDecreasing(int n){
      if(n<1) return;

      System.out.println(n);
      printDecreasing(n-1);  
    }

2. Print Increasing :
   public static void printIncreasing(int n){

        if(n<1) return;

        printIncreasing(n-1);
        System.out.println(n);
    }
 
 3. Print Increasing Decreasing:
   
    public static void pdi(int n){
        if(n<1) return;

        System.out.println(n);
         pdi(n-1);
        System.out.println(n);
        
    }
  
  4. Factorial:
   public static int factorial(int n){
        if(n<1) return 1;

        return n*factorial(n-1);
        
    }
    
  
    
   5. Power linear:
   
   public static int power(int x, int n){
         if(n<1) return 1;
         return x*power(x,n-1);
    }
    
   6. Power Logarithmic:
   
   
    public static int power(int x, int n){
         if(n==1) return x ;

         if(n%2==0){
         return power(x,n/2)*power(x,n/2);   
          }
        else{
           return power(x,n/2)*power(x,n/2)*x;    
          }
    }
    
    or 
    
     public static int power(int x, int n){
         if(n==0) return 1 ;

         int x2= power(x,n/2);
         int xx= x2*x2;

         if(n%2==1){
             xx=xx*x;
         }
           return xx;    
          }
          
  7. Print Zigzag:
  
   public static void pzz(int n){
      if(n==0)
      return ;

      System.out.print(n+" ");
      pzz(n-1);
      System.out.print(n+" ");
      pzz(n-1);
      System.out.print(n+" ");
    }
  
  8. Tower of Hanoi: 
  
  public static void toh(int n, int t1id, int t2id, int t3id){
        if(n==0) return ;

        toh(n-1,t1id,t3id,t2id);
        System.out.println(n +"["+t1id+" -> "+t2id+"]");
        toh(n-1,t3id,t2id,t1id);
    }

  9. Display Array:
    public static void displayArr(int[] arr, int idx){
        if(idx==arr.length) 
          return;

        System.out.println(arr[idx]);
        displayArr(arr,idx+1);
    }
    
  10. Array reverse:
   
    public static void displayArrReverse(int[] arr, int idx) {

        if(idx==arr.length) 
          return;

        displayArrReverse(arr,idx+1);
        System.out.println(arr[idx]);
    }

11. Max of an array:
 
 public static int maxOfArray(int[] arr, int idx){
        if(idx==arr.length-1)
        return arr[idx];

        int m= Math.max(arr[idx],maxOfArray(arr,idx+1));
        return m;
        
 12. 1st index of occurrence:
   
    public static int firstIndex(int[] arr, int idx, int x){
        if(idx==arr.length)
        return -1;
        if(arr[idx]==x)
        return idx;

        return firstIndex(arr,idx+1, x);
        
 13. Last index of occurrence:
 
     public static int lastIndex(int[] arr, int idx, int x){
         if(idx==arr.length){
             return -1;
         }
          int r=lastIndex( arr,  idx+1,  x);
              if(r==-1){
                  if(arr[idx]==x){
                      return idx;
                  }
                  else{
                      return -1;
                  }
              }
              else 
              return r;
         }

14. All indices of an array:

 public static int[] allIndices(int[] arr, int x, int idx, int fsf) {
        // write ur code here
        if(idx==arr.length)
          return new int[fsf];

        if(arr[idx]==x){
          int iarr[]= allIndices( arr,  x,  idx+1,  fsf+1);
          iarr[fsf]=idx;
          return iarr;
        }
        else{
            int iarr[]= allIndices( arr,  x,  idx+1,  fsf);
            return iarr;
        }

        }
        
 15. get Subsequence :
 
  public static ArrayList<String> gss(String str) {
    if(str.length()==0){
      ArrayList<String> blank =new ArrayList<>();
      blank.add("");
      return blank;  

    }

    char ch= str.charAt(0);
    str = str.substring(1);
    ArrayList<String> sub =gss(str);


     ArrayList<String> ans = new ArrayList<String>();

    for(String join: sub){
       ans.add(join);
    }
     for(String join: sub){
       ans.add(ch + join);
    }
    return ans;

    }
 
16. get Keypad combination :

static String[] code = {".;","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"};
   
    public static ArrayList<String> getKPC(String str) {
    if(str.length()==0){
        ArrayList<String> blank = new ArrayList<>();
        blank.add("");
        return blank;
    }

    int c = str.charAt(0);
    str=str.substring(1);
    ArrayList<String> sub = getKPC(str);

    ArrayList<String> ans = new ArrayList<>();
    String s = code[c-'0'];
        for (int i = 0; i < s.length(); i++) {
             char ch = s.charAt(i);    
         for(String join: sub){
           ans.add(ch + join );
         }
    }

    return ans;

    }
    
  17. get stair path:
  
  public static ArrayList<String> getStairPaths(int n) {
       if(n==0){
          ArrayList<String> blank = new ArrayList<>();
          blank.add("");
          return blank;
       }
       if(n<0){
         ArrayList<String> blank = new ArrayList<>();
          return blank; 
       }

       ArrayList<String> A= getStairPaths(n-1);
       ArrayList<String> B= getStairPaths(n-2);
       ArrayList<String> C= getStairPaths(n-3);
       
       ArrayList<String> ans = new ArrayList<>();

      for(String i: A){
         ans.add(1+i);
      }
      for(String i: B){
         ans.add(2+i);
      }
      for(String i: C){
         ans.add(3+i);
      }
      return ans;

    }

  18. get maze path:
  
   public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if(sr==dr && sc== dc)
        { ArrayList<String> r = new ArrayList<String>();
          r.add("");
          return r;

        }

        ArrayList<String> hget =new ArrayList<String>();
        ArrayList<String> vget =new ArrayList<String>();

        if(sc<dc){
            hget =getMazePaths( sr,  sc+1,  dr,  dc);
        }
        if(sr<dr){
            vget =getMazePaths( sr+1,  sc,  dr,  dc);
        }
        ArrayList<String> ans = new ArrayList<String>();

        for(String s: hget){
            ans.add("h"+s);
        }
         for(String s: vget){
            ans.add("v"+s);
        }
        
        return ans;
    }
    
    19. Maze path with jumps:
    
    public static ArrayList<String> getMazePaths(int sr, int sc, int dr, int dc) {
        if(sr==dr && sc==dc){
            ArrayList<String> blank = new ArrayList<String>();
            blank.add("");
            return blank;
        }
        ArrayList<String> ans = new ArrayList<String>();

        for(int i=1; i<=dc-sc; i++){
          ArrayList<String> hget=getMazePaths( sr,  sc+i, dr,  dc);
          for(String s:hget){
            ans.add("h"+i + s);
        }

        }
        for(int i=1; i<=dr-sr; i++){
           ArrayList<String> vget=getMazePaths( sr+i,  sc, dr,  dc);
           for(String s:vget){
            ans.add("v"+i + s);
        }
        }
        for(int i=1; i<=dc-sc && i<=dr-sr; i++){
           ArrayList<String> dget=getMazePaths( sr+i,  sc+i, dr,  dc);  
           for(String s:dget){
            ans.add("d"+i+ s);
        }
        }
        
        
        return ans;
    }

20. Print Subsequence:

 public static void printSS(String str, String ans) {
        if(str.length()==0){
        System.out.println(ans);
         return;
        }   
        char ch=str.charAt(0);
        str=str.substring(1);
        printSS(str,ans+ch);
        printSS(str,ans);


    }
    
 21. Print KPC: 
 
 static String[] code = {".;","abc","def","ghi","jkl","mno","pqrs","tu","vwx","yz"};
    public static void printKPC(String str, String asf) {
        if(str.length()==0){
            System.out.println(asf);
            return;
        }

        char c=str.charAt(0);
        str=str.substring(1);
        String ch = code[c - '0'];
        for(int i=0;i<ch.length();i++){
            char chh =ch.charAt(i);
        printKPC( str,asf+chh);
        }
    }

22. Print Stair Path:

  public static void printStairPaths(int n, String path) {
        if(n==0){
           System.out.println(path);
           return;
        }
        if(n<0){
           return;
        }
       
       for(int i=1; i<=3; i++){
       printStairPaths( n-i,path+i);
       }
    }
    
 23. Print maze path:
 
   public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
	     if(sr==dr && sc==dc){
           System.out.println(psf);
		   return;
		 } 
         
		 if(sc<dc){
           printMazePaths( sr,  sc+1,  dr,  dc, psf+"h");
		 } 
		 if(sr<dr){
           printMazePaths( sr+1,  sc,  dr,  dc,psf+"v");
		 } 
		 
			
	    }
  24. print maze path with jumps:
  
   public static void printMazePaths(int sr, int sc, int dr, int dc, String psf) {
      if(sc==dc && sr==dr){
          System.out.println(psf);
          return;
      } 
       for(int i=1; i<=dc-sc; i++){
        printMazePaths(sr,sc+i,dr,dc,psf+"h"+i);
       }
       for(int i=1; i<=dr-sr; i++){
        printMazePaths(sr+i,sc,dr,dc,psf+"v"+i);
       }
       for(int i=1; i<=dr-sr && i<=dc-sc; i++){
        printMazePaths(sr+i,sc+i,dr,dc,psf+"d"+i);
       }

    }

25. Print permutations:

  public static void printPermutations(String str, String asf) {
        if(str.length()==0){
            System.out.println(asf);
            return;
        }
        
        for(int i=0; i<str.length();i++){
            char c=str.charAt(i);
            String ls=str.substring(0,i);
            String rs=str.substring(i+1);
            String lsrs=ls+rs;
            printPermutations(lsrs,asf+c);
        }
26. Print Encodings:

public static void printEncodings(String str,String asf) {
        if(str.length()==0){
            System.out.println(asf);
            return;
        }
        else if(str.length()==1){
        char c1=str.charAt(0);
           if(c1=='0'){
            return;
        }
            else{
              int c11=c1-'0';
              char addc11=(char)('a' + c11 -1);
              
              System.out.println(asf+addc11);
            }
        }
        else{  
            char c1=str.charAt(0);
            String r=str.substring(1);
           if(c1=='0'){
            return;  
           }
           else{
            int c11=c1-'0';
              char addc11=(char)('a' + c11 -1);
              printEncodings(r,asf+addc11);
           
           }

        String s2=str.substring(0,2);
        String ss=str.substring(2);
        
        int c22=Integer.parseInt(s2);

        if(c22<=26){
        char addc11=(char)('a' + c22 -1);
        printEncodings(ss,asf+addc11);
        }
        
    }
    }
    
 27. Target sum susbsets:
 
   public static void printTargetSumSubsets(int[] arr, int idx, String set, int sos, int tar) {
       if(idx==arr.length){
        if(sos==tar){
          System.out.println(set+"."); 
        }
            return;
        }
        
          printTargetSumSubsets(arr,idx+1,set+arr[idx]+", ",sos+arr[idx],tar);
          printTargetSumSubsets(arr,idx+1,set,sos,tar);  
        }

    }

28. Flood fills:

public static void main(String[] args) {
        Scanner scn = new Scanner(System.in);
        int n = scn.nextInt();
        int m = scn.nextInt();
        int[][] arr = new int[n][m];
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                arr[i][j] = scn.nextInt();
            }
        }
        boolean[][] visited=new boolean[n][m];
        floodfill(arr, 0, 0, "",visited);
    }
    
    // asf -> answer so far
    public static void floodfill(int[][] maze, int sr, int sc, String asf,boolean[][] visited) {
       if(sr==maze.length-1 && sc== maze[0].length-1){
          System.out.println(asf);
          return;
       }
       if(sr<0||sc<0||sr==maze.length||sc==maze[0].length||maze[sr][sc]==1||visited[sr][sc]==true){
          return ;
    }
       visited[sr][sc] = true;
       floodfill(maze,sr-1,sc,asf+"t",visited);
       floodfill(maze,sr,sc-1,asf+"l",visited);
       floodfill(maze,sr+1,sc,asf+"d",visited);
       floodfill(maze,sr,sc+1,asf+"r",visited);
       visited[sr][sc]=false;

    }
    }

