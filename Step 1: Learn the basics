Step 1.1
: Things to Know in C++/Java/Python or any language
1.1.A:  User Input / Output:

import java.util.*;
Scanner Sc= new Scanner(System.in);
int num =sc.nextInt();
String s= sc.nextLine();


import java.io.*;
BufferedReader bf=new BufferedReader( new InputStreamReader(System.in));
String s= bf.readLine();
int num = Integer.parseInt(bf.readLine());

1.1.C: 	If Else statements:

class Solution{
    static String compareNM(int n,int m){
        // code here
        if(n>m)
        return "greater";
        
        else if(n<m)
        return "lesser";
        
        else
        return "equal";
    }
}

1.1.D: Switch Statement:
class Solution{
    static double switchCase(int choice, List<Double> arr){
        // code here
        double area=0;
        switch(choice){
        case 1: area = (Math.PI*arr.get(0)*arr.get(0));
                break;
        case 2: area = arr.get(0)*arr.get(1);
                break;
        }
        return area;
    }
}

1.1.G: While loops:

class Geeks {
	 static void printTable (int n) 
	 {
            int multiplier=10;
            while(multiplier>0)
            {
                int m=n*multiplier;
                multiplier--;
               System.out.print(m+ " "); 
                
                //Your code here
            }
       System.out.println();
	 }

}



Step 1.4 Know Basic Maths:

1.4.A: Count Digits:

class Solution{
    static int evenlyDivides(int N){
        // code here
        int count=0;
        int temp=N;
    
        while(N!=0){
            int div=N%10;
            if(div!=0){
                
            if(temp%div==0){
                count++;
            }
            }
            N=N/10;;
        }
        return count;
    }
}

1.4.B:	Reverse a Number:


1.4.C:	Check Palindrome:


class Solution
{
    public String is_palindrome(int n)
    {
        // Code here
        String s=Integer.toString(n);
        String rev = "";
        for(int i=s.length()-1; i>=0; i--){
            rev=rev+s.charAt(i);
        }
       
         if(s.equals(rev)) return "Yes";
           return "No";
    }
}

1.4.D:	GCD Or HCF:


class Solution {
    static Long[] lcmAndGcd(Long A , Long B) {
        // code here
        Long a= A;
        Long b=B;
    
        while(A%B!=0){
            Long temp = A%B;
            A=B;
            B=temp;
        }
        
        Long lcm= (a*b)/B;
        Long[] r={lcm, B};
        return r;
        
     
    }
};


1.4.E:	Armstrong Numbers:

class Solution {
    static String armstrongNumber(int n){
        // code here
        int c=0;
        int t=n;
        while(n!=0){
            int r= n%10;
            n=n/10;
            int p=(int)Math.pow(r,3);
            c=c+p;
            
        }
        if(c==t){
            return "Yes";
        }
        else
          return "No";
        
    }
}

1.4.F:	Print all Divisors			
1.4.G:	Check for Prime



Step 1.5 : Learn Basic Recursion:
1.5.C:  Print 1 to N using recursion:

class Solution
{
    
  public void printNos(int N)
    {
        if(N==0) 
        return ;
        
        printNos(N-1);
        System.out.print(N+" ");
        
        //Your code here
        
    }
}

1.5.D:	Print N to 1 using recursion:

class Solution
{
    
  public void printNos(int N)
    {
        if(N==0) 
        return ;
        
        System.out.print(N+" ");
        printNos(N-1);
       
        
        //Your code here
        
    }
}

1.5.E:	Sum of first N numbers:

class Solution {
    long sumOfSeries(long N) {
        // code here
        if(N<0) return 0;
        
        
        // System.out.print(N+" ");
        return (long)Math.pow(N,3) + sumOfSeries(N-1);
    }
    
    
}
1.5.F:	Factorial of N numbers			
1.5.G:	Reverse an array			
1.5.H:	Check if a string is palindrome or not			
1.5.I:	Fibonacci Number
















